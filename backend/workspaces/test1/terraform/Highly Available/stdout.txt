
[0m[1mInitializing the backend...[0m
[0m[1mInitializing modules...[0m
- instances in modules\instances
- networking in modules\networking
- security in modules\security

[0m[1mInitializing provider plugins...[0m
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.45.0...
- Installed hashicorp/aws v5.45.0 (signed by HashiCorp)

Terraform has created a lock file [1m.terraform.lock.hcl[0m to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.[0m

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # module.instances.aws_autoscaling_group.wordpress_asg[0m will be created
[0m  [32m+[0m[0m resource "aws_autoscaling_group" "wordpress_asg" {
      [32m+[0m[0m arn                              = (known after apply)
      [32m+[0m[0m availability_zones               = (known after apply)
      [32m+[0m[0m default_cooldown                 = (known after apply)
      [32m+[0m[0m desired_capacity                 = 2
      [32m+[0m[0m force_delete                     = false
      [32m+[0m[0m force_delete_warm_pool           = false
      [32m+[0m[0m health_check_grace_period        = 300
      [32m+[0m[0m health_check_type                = "ELB"
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_failed_scaling_activities = false
      [32m+[0m[0m launch_configuration             = (known after apply)
      [32m+[0m[0m load_balancers                   = (known after apply)
      [32m+[0m[0m max_size                         = 4
      [32m+[0m[0m metrics_granularity              = "1Minute"
      [32m+[0m[0m min_size                         = 2
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m name_prefix                      = (known after apply)
      [32m+[0m[0m predicted_capacity               = (known after apply)
      [32m+[0m[0m protect_from_scale_in            = false
      [32m+[0m[0m service_linked_role_arn          = (known after apply)
      [32m+[0m[0m target_group_arns                = (known after apply)
      [32m+[0m[0m vpc_zone_identifier              = (known after apply)
      [32m+[0m[0m wait_for_capacity_timeout        = "10m"
      [32m+[0m[0m warm_pool_size                   = (known after apply)

      [32m+[0m[0m tag {
          [32m+[0m[0m key                 = "Name"
          [32m+[0m[0m propagate_at_launch = true
          [32m+[0m[0m value               = "Wordpress App - test1"
        }
    }

[1m  # module.instances.aws_autoscaling_policy.scale_in_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_autoscaling_policy" "scale_in_policy" {
      [32m+[0m[0m adjustment_type         = "ChangeInCapacity"
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m autoscaling_group_name  = (known after apply)
      [32m+[0m[0m cooldown                = 120
      [32m+[0m[0m enabled                 = true
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m metric_aggregation_type = (known after apply)
      [32m+[0m[0m name                    = "scale-in-policy"
      [32m+[0m[0m policy_type             = "SimpleScaling"
      [32m+[0m[0m scaling_adjustment      = -1
    }

[1m  # module.instances.aws_autoscaling_policy.scale_out_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_autoscaling_policy" "scale_out_policy" {
      [32m+[0m[0m adjustment_type         = "ChangeInCapacity"
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m autoscaling_group_name  = (known after apply)
      [32m+[0m[0m cooldown                = 120
      [32m+[0m[0m enabled                 = true
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m metric_aggregation_type = (known after apply)
      [32m+[0m[0m name                    = "scale-out-policy"
      [32m+[0m[0m policy_type             = "SimpleScaling"
      [32m+[0m[0m scaling_adjustment      = 1
    }

[1m  # module.instances.aws_cloudwatch_metric_alarm.scale_in[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "scale_in" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "Monitors Request Count for Wordpress ASG"
      [32m+[0m[0m alarm_name                            = "wordpress_scale_down"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "LessThanOrEqualToThreshold"
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "RequestCountPerTarget"
      [32m+[0m[0m namespace                             = "AWS/EC2"
      [32m+[0m[0m period                                = 10
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags_all                              = (known after apply)
      [32m+[0m[0m threshold                             = 5
      [32m+[0m[0m treat_missing_data                    = "missing"
    }

[1m  # module.instances.aws_cloudwatch_metric_alarm.scale_out[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "scale_out" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "Monitors Request Count for Wordpress ASG"
      [32m+[0m[0m alarm_name                            = "wordpress_scale_up"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanOrEqualToThreshold"
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "RequestCountPerTarget"
      [32m+[0m[0m namespace                             = "AWS/EC2"
      [32m+[0m[0m period                                = 10
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags_all                              = (known after apply)
      [32m+[0m[0m threshold                             = 10
      [32m+[0m[0m treat_missing_data                    = "missing"
    }

[1m  # module.instances.aws_db_instance.wordpress_db[0m will be created
[0m  [32m+[0m[0m resource "aws_db_instance" "wordpress_db" {
      [32m+[0m[0m address                               = (known after apply)
      [32m+[0m[0m allocated_storage                     = 20
      [32m+[0m[0m apply_immediately                     = false
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade            = true
      [32m+[0m[0m availability_zone                     = (known after apply)
      [32m+[0m[0m backup_retention_period               = (known after apply)
      [32m+[0m[0m backup_target                         = (known after apply)
      [32m+[0m[0m backup_window                         = (known after apply)
      [32m+[0m[0m ca_cert_identifier                    = (known after apply)
      [32m+[0m[0m character_set_name                    = (known after apply)
      [32m+[0m[0m copy_tags_to_snapshot                 = false
      [32m+[0m[0m db_name                               = "wordpress"
      [32m+[0m[0m db_subnet_group_name                  = "db subnet group - test1"
      [32m+[0m[0m delete_automated_backups              = true
      [32m+[0m[0m domain_fqdn                           = (known after apply)
      [32m+[0m[0m endpoint                              = (known after apply)
      [32m+[0m[0m engine                                = "mariadb"
      [32m+[0m[0m engine_version                        = "10.11.5"
      [32m+[0m[0m engine_version_actual                 = (known after apply)
      [32m+[0m[0m hosted_zone_id                        = (known after apply)
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m identifier                            = "wordpress-test1"
      [32m+[0m[0m identifier_prefix                     = (known after apply)
      [32m+[0m[0m instance_class                        = "db.t3.micro"
      [32m+[0m[0m iops                                  = (known after apply)
      [32m+[0m[0m kms_key_id                            = (known after apply)
      [32m+[0m[0m latest_restorable_time                = (known after apply)
      [32m+[0m[0m license_model                         = (known after apply)
      [32m+[0m[0m listener_endpoint                     = (known after apply)
      [32m+[0m[0m maintenance_window                    = (known after apply)
      [32m+[0m[0m master_user_secret                    = (known after apply)
      [32m+[0m[0m master_user_secret_kms_key_id         = (known after apply)
      [32m+[0m[0m monitoring_interval                   = 0
      [32m+[0m[0m monitoring_role_arn                   = (known after apply)
      [32m+[0m[0m multi_az                              = true
      [32m+[0m[0m nchar_character_set_name              = (known after apply)
      [32m+[0m[0m network_type                          = (known after apply)
      [32m+[0m[0m option_group_name                     = (known after apply)
      [32m+[0m[0m parameter_group_name                  = (known after apply)
      [32m+[0m[0m password                              = (sensitive value)
      [32m+[0m[0m performance_insights_enabled          = false
      [32m+[0m[0m performance_insights_kms_key_id       = (known after apply)
      [32m+[0m[0m performance_insights_retention_period = (known after apply)
      [32m+[0m[0m port                                  = (known after apply)
      [32m+[0m[0m publicly_accessible                   = false
      [32m+[0m[0m replica_mode                          = (known after apply)
      [32m+[0m[0m replicas                              = (known after apply)
      [32m+[0m[0m resource_id                           = (known after apply)
      [32m+[0m[0m skip_final_snapshot                   = true
      [32m+[0m[0m snapshot_identifier                   = (known after apply)
      [32m+[0m[0m status                                = (known after apply)
      [32m+[0m[0m storage_throughput                    = (known after apply)
      [32m+[0m[0m storage_type                          = "gp3"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Name" = "WordPress DB - test1"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Name" = "WordPress DB - test1"
        }
      [32m+[0m[0m timezone                              = (known after apply)
      [32m+[0m[0m username                              = "wordpressuser"
      [32m+[0m[0m vpc_security_group_ids                = (known after apply)
    }

[1m  # module.instances.aws_db_subnet_group.db-subnet[0m will be created
[0m  [32m+[0m[0m resource "aws_db_subnet_group" "db-subnet" {
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m description             = "Managed by Terraform"
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m name                    = "db subnet group - test1"
      [32m+[0m[0m name_prefix             = (known after apply)
      [32m+[0m[0m subnet_ids              = (known after apply)
      [32m+[0m[0m supported_network_types = (known after apply)
      [32m+[0m[0m tags_all                = (known after apply)
      [32m+[0m[0m vpc_id                  = (known after apply)
    }

[1m  # module.instances.aws_efs_backup_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_efs_backup_policy" "policy" {
      [32m+[0m[0m file_system_id = (known after apply)
      [32m+[0m[0m id             = (known after apply)

      [32m+[0m[0m backup_policy {
          [32m+[0m[0m status = "DISABLED"
        }
    }

[1m  # module.instances.aws_efs_file_system.wordpress_efs[0m will be created
[0m  [32m+[0m[0m resource "aws_efs_file_system" "wordpress_efs" {
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m availability_zone_id    = (known after apply)
      [32m+[0m[0m availability_zone_name  = (known after apply)
      [32m+[0m[0m creation_token          = "wordpress-efs-test1"
      [32m+[0m[0m dns_name                = (known after apply)
      [32m+[0m[0m encrypted               = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m kms_key_id              = (known after apply)
      [32m+[0m[0m name                    = (known after apply)
      [32m+[0m[0m number_of_mount_targets = (known after apply)
      [32m+[0m[0m owner_id                = (known after apply)
      [32m+[0m[0m performance_mode        = "generalPurpose"
      [32m+[0m[0m size_in_bytes           = (known after apply)
      [32m+[0m[0m tags                    = {
          [32m+[0m[0m "Name" = "WordPressEFS-test1"
        }
      [32m+[0m[0m tags_all                = {
          [32m+[0m[0m "Name" = "WordPressEFS-test1"
        }
      [32m+[0m[0m throughput_mode         = "bursting"
    }

[1m  # module.instances.aws_efs_mount_target.wordpress_mount_target[0][0m will be created
[0m  [32m+[0m[0m resource "aws_efs_mount_target" "wordpress_mount_target" {
      [32m+[0m[0m availability_zone_id   = (known after apply)
      [32m+[0m[0m availability_zone_name = (known after apply)
      [32m+[0m[0m dns_name               = (known after apply)
      [32m+[0m[0m file_system_arn        = (known after apply)
      [32m+[0m[0m file_system_id         = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ip_address             = (known after apply)
      [32m+[0m[0m mount_target_dns_name  = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m security_groups        = (known after apply)
      [32m+[0m[0m subnet_id              = (known after apply)
    }

[1m  # module.instances.aws_efs_mount_target.wordpress_mount_target[1][0m will be created
[0m  [32m+[0m[0m resource "aws_efs_mount_target" "wordpress_mount_target" {
      [32m+[0m[0m availability_zone_id   = (known after apply)
      [32m+[0m[0m availability_zone_name = (known after apply)
      [32m+[0m[0m dns_name               = (known after apply)
      [32m+[0m[0m file_system_arn        = (known after apply)
      [32m+[0m[0m file_system_id         = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ip_address             = (known after apply)
      [32m+[0m[0m mount_target_dns_name  = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m security_groups        = (known after apply)
      [32m+[0m[0m subnet_id              = (known after apply)
    }

[1m  # module.instances.aws_instance.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "bastion" {
      [32m+[0m[0m ami                                  = "ami-0df5c32c4d4710802"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = true
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t2.micro"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = "bastion-key"
      [32m+[0m[0m monitoring                           = true
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = true
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "Bastion Instance - test1"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "Bastion Instance - test1"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = (known after apply)
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)
    }

[1m  # module.instances.aws_launch_configuration.wordpress_lc[0m will be created
[0m  [32m+[0m[0m resource "aws_launch_configuration" "wordpress_lc" {
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m associate_public_ip_address = true
      [32m+[0m[0m ebs_optimized               = (known after apply)
      [32m+[0m[0m enable_monitoring           = true
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m image_id                    = "ami-0df5c32c4d4710802"
      [32m+[0m[0m instance_type               = "t2.micro"
      [32m+[0m[0m key_name                    = (known after apply)
      [32m+[0m[0m name                        = (known after apply)
      [32m+[0m[0m name_prefix                 = (known after apply)
      [32m+[0m[0m security_groups             = (known after apply)
      [32m+[0m[0m user_data                   = (known after apply)
    }

[1m  # module.instances.aws_lb.wordpress_lb[0m will be created
[0m  [32m+[0m[0m resource "aws_lb" "wordpress_lb" {
      [32m+[0m[0m arn                                                          = (known after apply)
      [32m+[0m[0m arn_suffix                                                   = (known after apply)
      [32m+[0m[0m desync_mitigation_mode                                       = "defensive"
      [32m+[0m[0m dns_name                                                     = (known after apply)
      [32m+[0m[0m drop_invalid_header_fields                                   = false
      [32m+[0m[0m enable_deletion_protection                                   = false
      [32m+[0m[0m enable_http2                                                 = true
      [32m+[0m[0m enable_tls_version_and_cipher_suite_headers                  = false
      [32m+[0m[0m enable_waf_fail_open                                         = false
      [32m+[0m[0m enable_xff_client_port                                       = false
      [32m+[0m[0m enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      [32m+[0m[0m id                                                           = (known after apply)
      [32m+[0m[0m idle_timeout                                                 = 60
      [32m+[0m[0m internal                                                     = false
      [32m+[0m[0m ip_address_type                                              = (known after apply)
      [32m+[0m[0m load_balancer_type                                           = "application"
      [32m+[0m[0m name                                                         = "wordpress-lb-test1"
      [32m+[0m[0m name_prefix                                                  = (known after apply)
      [32m+[0m[0m preserve_host_header                                         = false
      [32m+[0m[0m security_groups                                              = (known after apply)
      [32m+[0m[0m subnets                                                      = (known after apply)
      [32m+[0m[0m tags                                                         = {
          [32m+[0m[0m "Name" = "Application Load Balancer - test1"
        }
      [32m+[0m[0m tags_all                                                     = {
          [32m+[0m[0m "Name" = "Application Load Balancer - test1"
        }
      [32m+[0m[0m vpc_id                                                       = (known after apply)
      [32m+[0m[0m xff_header_processing_mode                                   = "append"
      [32m+[0m[0m zone_id                                                      = (known after apply)
    }

[1m  # module.instances.aws_lb_listener.wordpress_listener[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "wordpress_listener" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m load_balancer_arn = (known after apply)
      [32m+[0m[0m port              = 80
      [32m+[0m[0m protocol          = "HTTP"
      [32m+[0m[0m ssl_policy        = (known after apply)
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Name" = "Listener for LB - test1"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Name" = "Listener for LB - test1"
        }

      [32m+[0m[0m default_action {
          [32m+[0m[0m order            = (known after apply)
          [32m+[0m[0m target_group_arn = (known after apply)
          [32m+[0m[0m type             = "forward"
        }
    }

[1m  # module.instances.aws_lb_target_group.wordpress_tg[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group" "wordpress_tg" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m arn_suffix                         = (known after apply)
      [32m+[0m[0m connection_termination             = (known after apply)
      [32m+[0m[0m deregistration_delay               = "300"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m ip_address_type                    = (known after apply)
      [32m+[0m[0m lambda_multi_value_headers_enabled = false
      [32m+[0m[0m load_balancer_arns                 = (known after apply)
      [32m+[0m[0m load_balancing_algorithm_type      = (known after apply)
      [32m+[0m[0m load_balancing_anomaly_mitigation  = (known after apply)
      [32m+[0m[0m load_balancing_cross_zone_enabled  = (known after apply)
      [32m+[0m[0m name                               = "wordpress-tg-test1"
      [32m+[0m[0m name_prefix                        = (known after apply)
      [32m+[0m[0m port                               = 80
      [32m+[0m[0m preserve_client_ip                 = (known after apply)
      [32m+[0m[0m protocol                           = "HTTP"
      [32m+[0m[0m protocol_version                   = (known after apply)
      [32m+[0m[0m proxy_protocol_v2                  = false
      [32m+[0m[0m slow_start                         = 0
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name" = "Target Group - test1"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name" = "Target Group - test1"
        }
      [32m+[0m[0m target_type                        = "instance"
      [32m+[0m[0m vpc_id                             = (known after apply)

      [32m+[0m[0m health_check {
          [32m+[0m[0m enabled             = true
          [32m+[0m[0m healthy_threshold   = 2
          [32m+[0m[0m interval            = 25
          [32m+[0m[0m matcher             = "200,301"
          [32m+[0m[0m path                = "/wordpress"
          [32m+[0m[0m port                = "80"
          [32m+[0m[0m protocol            = "HTTP"
          [32m+[0m[0m timeout             = 20
          [32m+[0m[0m unhealthy_threshold = 2
        }
    }

[1m  # module.networking.aws_eip.nat_eip[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat_eip" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # module.networking.aws_internet_gateway.gw[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "gw" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Name" = "Internet Gateway"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Name" = "Internet Gateway"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.networking.aws_nat_gateway.nat_gateway[0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "nat_gateway" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name" = "NAT Gateway"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name" = "NAT Gateway"
        }
    }

[1m  # module.networking.aws_route_table.private_route[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private_route" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = (known after apply)
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "Private Route Table"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "Private Route Table"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.networking.aws_route_table.public_route[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public_route" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = (known after apply)
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "Public Route Table"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "Public Route Table"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.networking.aws_route_table_association.private_subnet_1_association[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_subnet_1_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.networking.aws_route_table_association.private_subnet_2_association[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_subnet_2_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.networking.aws_route_table_association.private_subnet_3_association[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_subnet_3_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.networking.aws_route_table_association.public_subnet_1_association[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_subnet_1_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.networking.aws_route_table_association.public_subnet_2_association[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_subnet_2_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.networking.aws_subnet.private_subnet_1[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnet_1" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-southeast-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.3.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "Private Subnet 1 - test1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "Private Subnet 1 - test1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.networking.aws_subnet.private_subnet_2[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnet_2" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-southeast-2b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.4.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "Private Subnet 2 - test1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "Private Subnet 2 - test1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.networking.aws_subnet.private_subnet_3[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnet_3" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-southeast-2c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.5.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "Private Subnet 3 - test1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "Private Subnet 3 - test1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.networking.aws_subnet.public_subnet_1[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet_1" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-southeast-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "Public Subnet 1 - test1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "Public Subnet 1 - test1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.networking.aws_subnet.public_subnet_2[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet_2" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-southeast-2b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "Public Subnet 2 - test1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "Public Subnet 2 - test1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.networking.aws_vpc.main[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "main" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "test1-VPC"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "test1-VPC"
        }
    }

[1m  # module.security.aws_security_group.bastion_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "bastion_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "RDS Security Group - test1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "RDS Security Group - test1"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security.aws_security_group.ec2_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "ec2_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "EC2 Security Group - test1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "EC2 Security Group - test1"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security.aws_security_group.efs_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "efs_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 2049
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 2049
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "EFS Security Group - test1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "EFS Security Group - test1"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security.aws_security_group.lb_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "lb_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "LB Security Group - test1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "LB Security Group - test1"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security.aws_security_group.rds_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "rds_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 3306
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 3306
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 5432
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 5432
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "RDS Security Group - test1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "RDS Security Group - test1"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1mPlan:[0m 37 to add, 0 to change, 0 to destroy.
[0m[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # module.instances.aws_autoscaling_group.wordpress_asg[0m will be created
[0m  [32m+[0m[0m resource "aws_autoscaling_group" "wordpress_asg" {
      [32m+[0m[0m arn                              = (known after apply)
      [32m+[0m[0m availability_zones               = (known after apply)
      [32m+[0m[0m default_cooldown                 = (known after apply)
      [32m+[0m[0m desired_capacity                 = 2
      [32m+[0m[0m force_delete                     = false
      [32m+[0m[0m force_delete_warm_pool           = false
      [32m+[0m[0m health_check_grace_period        = 300
      [32m+[0m[0m health_check_type                = "ELB"
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_failed_scaling_activities = false
      [32m+[0m[0m launch_configuration             = (known after apply)
      [32m+[0m[0m load_balancers                   = (known after apply)
      [32m+[0m[0m max_size                         = 4
      [32m+[0m[0m metrics_granularity              = "1Minute"
      [32m+[0m[0m min_size                         = 2
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m name_prefix                      = (known after apply)
      [32m+[0m[0m predicted_capacity               = (known after apply)
      [32m+[0m[0m protect_from_scale_in            = false
      [32m+[0m[0m service_linked_role_arn          = (known after apply)
      [32m+[0m[0m target_group_arns                = (known after apply)
      [32m+[0m[0m vpc_zone_identifier              = (known after apply)
      [32m+[0m[0m wait_for_capacity_timeout        = "10m"
      [32m+[0m[0m warm_pool_size                   = (known after apply)

      [32m+[0m[0m tag {
          [32m+[0m[0m key                 = "Name"
          [32m+[0m[0m propagate_at_launch = true
          [32m+[0m[0m value               = "Wordpress App - test1"
        }
    }

[1m  # module.instances.aws_autoscaling_policy.scale_in_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_autoscaling_policy" "scale_in_policy" {
      [32m+[0m[0m adjustment_type         = "ChangeInCapacity"
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m autoscaling_group_name  = (known after apply)
      [32m+[0m[0m cooldown                = 120
      [32m+[0m[0m enabled                 = true
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m metric_aggregation_type = (known after apply)
      [32m+[0m[0m name                    = "scale-in-policy"
      [32m+[0m[0m policy_type             = "SimpleScaling"
      [32m+[0m[0m scaling_adjustment      = -1
    }

[1m  # module.instances.aws_autoscaling_policy.scale_out_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_autoscaling_policy" "scale_out_policy" {
      [32m+[0m[0m adjustment_type         = "ChangeInCapacity"
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m autoscaling_group_name  = (known after apply)
      [32m+[0m[0m cooldown                = 120
      [32m+[0m[0m enabled                 = true
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m metric_aggregation_type = (known after apply)
      [32m+[0m[0m name                    = "scale-out-policy"
      [32m+[0m[0m policy_type             = "SimpleScaling"
      [32m+[0m[0m scaling_adjustment      = 1
    }

[1m  # module.instances.aws_cloudwatch_metric_alarm.scale_in[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "scale_in" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "Monitors Request Count for Wordpress ASG"
      [32m+[0m[0m alarm_name                            = "wordpress_scale_down"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "LessThanOrEqualToThreshold"
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "RequestCountPerTarget"
      [32m+[0m[0m namespace                             = "AWS/EC2"
      [32m+[0m[0m period                                = 10
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags_all                              = (known after apply)
      [32m+[0m[0m threshold                             = 5
      [32m+[0m[0m treat_missing_data                    = "missing"
    }

[1m  # module.instances.aws_cloudwatch_metric_alarm.scale_out[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "scale_out" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "Monitors Request Count for Wordpress ASG"
      [32m+[0m[0m alarm_name                            = "wordpress_scale_up"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanOrEqualToThreshold"
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "RequestCountPerTarget"
      [32m+[0m[0m namespace                             = "AWS/EC2"
      [32m+[0m[0m period                                = 10
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags_all                              = (known after apply)
      [32m+[0m[0m threshold                             = 10
      [32m+[0m[0m treat_missing_data                    = "missing"
    }

[1m  # module.instances.aws_db_instance.wordpress_db[0m will be created
[0m  [32m+[0m[0m resource "aws_db_instance" "wordpress_db" {
      [32m+[0m[0m address                               = (known after apply)
      [32m+[0m[0m allocated_storage                     = 20
      [32m+[0m[0m apply_immediately                     = false
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade            = true
      [32m+[0m[0m availability_zone                     = (known after apply)
      [32m+[0m[0m backup_retention_period               = (known after apply)
      [32m+[0m[0m backup_target                         = (known after apply)
      [32m+[0m[0m backup_window                         = (known after apply)
      [32m+[0m[0m ca_cert_identifier                    = (known after apply)
      [32m+[0m[0m character_set_name                    = (known after apply)
      [32m+[0m[0m copy_tags_to_snapshot                 = false
      [32m+[0m[0m db_name                               = "wordpress"
      [32m+[0m[0m db_subnet_group_name                  = "db subnet group - test1"
      [32m+[0m[0m delete_automated_backups              = true
      [32m+[0m[0m domain_fqdn                           = (known after apply)
      [32m+[0m[0m endpoint                              = (known after apply)
      [32m+[0m[0m engine                                = "mariadb"
      [32m+[0m[0m engine_version                        = "10.11.5"
      [32m+[0m[0m engine_version_actual                 = (known after apply)
      [32m+[0m[0m hosted_zone_id                        = (known after apply)
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m identifier                            = "wordpress-test1"
      [32m+[0m[0m identifier_prefix                     = (known after apply)
      [32m+[0m[0m instance_class                        = "db.t3.micro"
      [32m+[0m[0m iops                                  = (known after apply)
      [32m+[0m[0m kms_key_id                            = (known after apply)
      [32m+[0m[0m latest_restorable_time                = (known after apply)
      [32m+[0m[0m license_model                         = (known after apply)
      [32m+[0m[0m listener_endpoint                     = (known after apply)
      [32m+[0m[0m maintenance_window                    = (known after apply)
      [32m+[0m[0m master_user_secret                    = (known after apply)
      [32m+[0m[0m master_user_secret_kms_key_id         = (known after apply)
      [32m+[0m[0m monitoring_interval                   = 0
      [32m+[0m[0m monitoring_role_arn                   = (known after apply)
      [32m+[0m[0m multi_az                              = true
      [32m+[0m[0m nchar_character_set_name              = (known after apply)
      [32m+[0m[0m network_type                          = (known after apply)
      [32m+[0m[0m option_group_name                     = (known after apply)
      [32m+[0m[0m parameter_group_name                  = (known after apply)
      [32m+[0m[0m password                              = (sensitive value)
      [32m+[0m[0m performance_insights_enabled          = false
      [32m+[0m[0m performance_insights_kms_key_id       = (known after apply)
      [32m+[0m[0m performance_insights_retention_period = (known after apply)
      [32m+[0m[0m port                                  = (known after apply)
      [32m+[0m[0m publicly_accessible                   = false
      [32m+[0m[0m replica_mode                          = (known after apply)
      [32m+[0m[0m replicas                              = (known after apply)
      [32m+[0m[0m resource_id                           = (known after apply)
      [32m+[0m[0m skip_final_snapshot                   = true
      [32m+[0m[0m snapshot_identifier                   = (known after apply)
      [32m+[0m[0m status                                = (known after apply)
      [32m+[0m[0m storage_throughput                    = (known after apply)
      [32m+[0m[0m storage_type                          = "gp3"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Name" = "WordPress DB - test1"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Name" = "WordPress DB - test1"
        }
      [32m+[0m[0m timezone                              = (known after apply)
      [32m+[0m[0m username                              = "wordpressuser"
      [32m+[0m[0m vpc_security_group_ids                = (known after apply)
    }

[1m  # module.instances.aws_db_subnet_group.db-subnet[0m will be created
[0m  [32m+[0m[0m resource "aws_db_subnet_group" "db-subnet" {
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m description             = "Managed by Terraform"
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m name                    = "db subnet group - test1"
      [32m+[0m[0m name_prefix             = (known after apply)
      [32m+[0m[0m subnet_ids              = (known after apply)
      [32m+[0m[0m supported_network_types = (known after apply)
      [32m+[0m[0m tags_all                = (known after apply)
      [32m+[0m[0m vpc_id                  = (known after apply)
    }

[1m  # module.instances.aws_efs_backup_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_efs_backup_policy" "policy" {
      [32m+[0m[0m file_system_id = (known after apply)
      [32m+[0m[0m id             = (known after apply)

      [32m+[0m[0m backup_policy {
          [32m+[0m[0m status = "DISABLED"
        }
    }

[1m  # module.instances.aws_efs_file_system.wordpress_efs[0m will be created
[0m  [32m+[0m[0m resource "aws_efs_file_system" "wordpress_efs" {
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m availability_zone_id    = (known after apply)
      [32m+[0m[0m availability_zone_name  = (known after apply)
      [32m+[0m[0m creation_token          = "wordpress-efs-test1"
      [32m+[0m[0m dns_name                = (known after apply)
      [32m+[0m[0m encrypted               = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m kms_key_id              = (known after apply)
      [32m+[0m[0m name                    = (known after apply)
      [32m+[0m[0m number_of_mount_targets = (known after apply)
      [32m+[0m[0m owner_id                = (known after apply)
      [32m+[0m[0m performance_mode        = "generalPurpose"
      [32m+[0m[0m size_in_bytes           = (known after apply)
      [32m+[0m[0m tags                    = {
          [32m+[0m[0m "Name" = "WordPressEFS-test1"
        }
      [32m+[0m[0m tags_all                = {
          [32m+[0m[0m "Name" = "WordPressEFS-test1"
        }
      [32m+[0m[0m throughput_mode         = "bursting"
    }

[1m  # module.instances.aws_efs_mount_target.wordpress_mount_target[0][0m will be created
[0m  [32m+[0m[0m resource "aws_efs_mount_target" "wordpress_mount_target" {
      [32m+[0m[0m availability_zone_id   = (known after apply)
      [32m+[0m[0m availability_zone_name = (known after apply)
      [32m+[0m[0m dns_name               = (known after apply)
      [32m+[0m[0m file_system_arn        = (known after apply)
      [32m+[0m[0m file_system_id         = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ip_address             = (known after apply)
      [32m+[0m[0m mount_target_dns_name  = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m security_groups        = (known after apply)
      [32m+[0m[0m subnet_id              = (known after apply)
    }

[1m  # module.instances.aws_efs_mount_target.wordpress_mount_target[1][0m will be created
[0m  [32m+[0m[0m resource "aws_efs_mount_target" "wordpress_mount_target" {
      [32m+[0m[0m availability_zone_id   = (known after apply)
      [32m+[0m[0m availability_zone_name = (known after apply)
      [32m+[0m[0m dns_name               = (known after apply)
      [32m+[0m[0m file_system_arn        = (known after apply)
      [32m+[0m[0m file_system_id         = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ip_address             = (known after apply)
      [32m+[0m[0m mount_target_dns_name  = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m security_groups        = (known after apply)
      [32m+[0m[0m subnet_id              = (known after apply)
    }

[1m  # module.instances.aws_instance.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "bastion" {
      [32m+[0m[0m ami                                  = "ami-0df5c32c4d4710802"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = true
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t2.micro"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = "bastion-key"
      [32m+[0m[0m monitoring                           = true
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = true
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "Bastion Instance - test1"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "Bastion Instance - test1"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = (known after apply)
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)
    }

[1m  # module.instances.aws_launch_configuration.wordpress_lc[0m will be created
[0m  [32m+[0m[0m resource "aws_launch_configuration" "wordpress_lc" {
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m associate_public_ip_address = true
      [32m+[0m[0m ebs_optimized               = (known after apply)
      [32m+[0m[0m enable_monitoring           = true
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m image_id                    = "ami-0df5c32c4d4710802"
      [32m+[0m[0m instance_type               = "t2.micro"
      [32m+[0m[0m key_name                    = (known after apply)
      [32m+[0m[0m name                        = (known after apply)
      [32m+[0m[0m name_prefix                 = (known after apply)
      [32m+[0m[0m security_groups             = (known after apply)
      [32m+[0m[0m user_data                   = (known after apply)
    }

[1m  # module.instances.aws_lb.wordpress_lb[0m will be created
[0m  [32m+[0m[0m resource "aws_lb" "wordpress_lb" {
      [32m+[0m[0m arn                                                          = (known after apply)
      [32m+[0m[0m arn_suffix                                                   = (known after apply)
      [32m+[0m[0m desync_mitigation_mode                                       = "defensive"
      [32m+[0m[0m dns_name                                                     = (known after apply)
      [32m+[0m[0m drop_invalid_header_fields                                   = false
      [32m+[0m[0m enable_deletion_protection                                   = false
      [32m+[0m[0m enable_http2                                                 = true
      [32m+[0m[0m enable_tls_version_and_cipher_suite_headers                  = false
      [32m+[0m[0m enable_waf_fail_open                                         = false
      [32m+[0m[0m enable_xff_client_port                                       = false
      [32m+[0m[0m enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      [32m+[0m[0m id                                                           = (known after apply)
      [32m+[0m[0m idle_timeout                                                 = 60
      [32m+[0m[0m internal                                                     = false
      [32m+[0m[0m ip_address_type                                              = (known after apply)
      [32m+[0m[0m load_balancer_type                                           = "application"
      [32m+[0m[0m name                                                         = "wordpress-lb-test1"
      [32m+[0m[0m name_prefix                                                  = (known after apply)
      [32m+[0m[0m preserve_host_header                                         = false
      [32m+[0m[0m security_groups                                              = (known after apply)
      [32m+[0m[0m subnets                                                      = (known after apply)
      [32m+[0m[0m tags                                                         = {
          [32m+[0m[0m "Name" = "Application Load Balancer - test1"
        }
      [32m+[0m[0m tags_all                                                     = {
          [32m+[0m[0m "Name" = "Application Load Balancer - test1"
        }
      [32m+[0m[0m vpc_id                                                       = (known after apply)
      [32m+[0m[0m xff_header_processing_mode                                   = "append"
      [32m+[0m[0m zone_id                                                      = (known after apply)
    }

[1m  # module.instances.aws_lb_listener.wordpress_listener[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "wordpress_listener" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m load_balancer_arn = (known after apply)
      [32m+[0m[0m port              = 80
      [32m+[0m[0m protocol          = "HTTP"
      [32m+[0m[0m ssl_policy        = (known after apply)
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Name" = "Listener for LB - test1"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Name" = "Listener for LB - test1"
        }

      [32m+[0m[0m default_action {
          [32m+[0m[0m order            = (known after apply)
          [32m+[0m[0m target_group_arn = (known after apply)
          [32m+[0m[0m type             = "forward"
        }
    }

[1m  # module.instances.aws_lb_target_group.wordpress_tg[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group" "wordpress_tg" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m arn_suffix                         = (known after apply)
      [32m+[0m[0m connection_termination             = (known after apply)
      [32m+[0m[0m deregistration_delay               = "300"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m ip_address_type                    = (known after apply)
      [32m+[0m[0m lambda_multi_value_headers_enabled = false
      [32m+[0m[0m load_balancer_arns                 = (known after apply)
      [32m+[0m[0m load_balancing_algorithm_type      = (known after apply)
      [32m+[0m[0m load_balancing_anomaly_mitigation  = (known after apply)
      [32m+[0m[0m load_balancing_cross_zone_enabled  = (known after apply)
      [32m+[0m[0m name                               = "wordpress-tg-test1"
      [32m+[0m[0m name_prefix                        = (known after apply)
      [32m+[0m[0m port                               = 80
      [32m+[0m[0m preserve_client_ip                 = (known after apply)
      [32m+[0m[0m protocol                           = "HTTP"
      [32m+[0m[0m protocol_version                   = (known after apply)
      [32m+[0m[0m proxy_protocol_v2                  = false
      [32m+[0m[0m slow_start                         = 0
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name" = "Target Group - test1"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name" = "Target Group - test1"
        }
      [32m+[0m[0m target_type                        = "instance"
      [32m+[0m[0m vpc_id                             = (known after apply)

      [32m+[0m[0m health_check {
          [32m+[0m[0m enabled             = true
          [32m+[0m[0m healthy_threshold   = 2
          [32m+[0m[0m interval            = 25
          [32m+[0m[0m matcher             = "200,301"
          [32m+[0m[0m path                = "/wordpress"
          [32m+[0m[0m port                = "80"
          [32m+[0m[0m protocol            = "HTTP"
          [32m+[0m[0m timeout             = 20
          [32m+[0m[0m unhealthy_threshold = 2
        }
    }

[1m  # module.networking.aws_eip.nat_eip[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat_eip" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # module.networking.aws_internet_gateway.gw[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "gw" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Name" = "Internet Gateway"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Name" = "Internet Gateway"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.networking.aws_nat_gateway.nat_gateway[0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "nat_gateway" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name" = "NAT Gateway"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name" = "NAT Gateway"
        }
    }

[1m  # module.networking.aws_route_table.private_route[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private_route" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = (known after apply)
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "Private Route Table"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "Private Route Table"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.networking.aws_route_table.public_route[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public_route" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = (known after apply)
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "Public Route Table"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "Public Route Table"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.networking.aws_route_table_association.private_subnet_1_association[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_subnet_1_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.networking.aws_route_table_association.private_subnet_2_association[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_subnet_2_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.networking.aws_route_table_association.private_subnet_3_association[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_subnet_3_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.networking.aws_route_table_association.public_subnet_1_association[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_subnet_1_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.networking.aws_route_table_association.public_subnet_2_association[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_subnet_2_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.networking.aws_subnet.private_subnet_1[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnet_1" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-southeast-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.3.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "Private Subnet 1 - test1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "Private Subnet 1 - test1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.networking.aws_subnet.private_subnet_2[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnet_2" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-southeast-2b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.4.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "Private Subnet 2 - test1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "Private Subnet 2 - test1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.networking.aws_subnet.private_subnet_3[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnet_3" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-southeast-2c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.5.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "Private Subnet 3 - test1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "Private Subnet 3 - test1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.networking.aws_subnet.public_subnet_1[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet_1" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-southeast-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "Public Subnet 1 - test1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "Public Subnet 1 - test1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.networking.aws_subnet.public_subnet_2[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet_2" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-southeast-2b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "Public Subnet 2 - test1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "Public Subnet 2 - test1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.networking.aws_vpc.main[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "main" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "test1-VPC"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "test1-VPC"
        }
    }

[1m  # module.security.aws_security_group.bastion_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "bastion_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "RDS Security Group - test1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "RDS Security Group - test1"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security.aws_security_group.ec2_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "ec2_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "EC2 Security Group - test1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "EC2 Security Group - test1"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security.aws_security_group.efs_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "efs_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 2049
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 2049
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "EFS Security Group - test1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "EFS Security Group - test1"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security.aws_security_group.lb_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "lb_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "LB Security Group - test1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "LB Security Group - test1"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security.aws_security_group.rds_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "rds_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 3306
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 3306
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 5432
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 5432
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "RDS Security Group - test1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "RDS Security Group - test1"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1mPlan:[0m 37 to add, 0 to change, 0 to destroy.
[0m[0m[1mmodule.networking.aws_eip.nat_eip: Creating...[0m[0m
[0m[1mmodule.networking.aws_vpc.main: Creating...[0m[0m
[0m[1mmodule.instances.aws_efs_file_system.wordpress_efs: Creating...[0m[0m
[0m[1mmodule.networking.aws_eip.nat_eip: Creation complete after 1s [id=eipalloc-0edefc3578a12804c][0m
[0m[1mmodule.instances.aws_efs_file_system.wordpress_efs: Creation complete after 6s [id=fs-044a9f50f7f95c4b4][0m
[0m[1mmodule.instances.aws_efs_backup_policy.policy: Creating...[0m[0m
[0m[1mmodule.instances.aws_efs_backup_policy.policy: Creation complete after 2s [id=fs-044a9f50f7f95c4b4][0m
[0m[1mmodule.networking.aws_vpc.main: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.networking.aws_vpc.main: Creation complete after 12s [id=vpc-00d71a8d5c877cfe1][0m
[0m[1mmodule.networking.aws_internet_gateway.gw: Creating...[0m[0m
[0m[1mmodule.networking.aws_subnet.private_subnet_3: Creating...[0m[0m
[0m[1mmodule.networking.aws_subnet.private_subnet_1: Creating...[0m[0m
[0m[1mmodule.networking.aws_subnet.private_subnet_2: Creating...[0m[0m
[0m[1mmodule.networking.aws_subnet.public_subnet_2: Creating...[0m[0m
[0m[1mmodule.networking.aws_subnet.public_subnet_1: Creating...[0m[0m
[0m[1mmodule.security.aws_security_group.lb_sg: Creating...[0m[0m
[0m[1mmodule.security.aws_security_group.bastion_sg: Creating...[0m[0m
[0m[1mmodule.networking.aws_internet_gateway.gw: Creation complete after 1s [id=igw-00bd48962c2115b46][0m
[0m[1mmodule.networking.aws_route_table.public_route: Creating...[0m[0m
[0m[1mmodule.networking.aws_subnet.private_subnet_3: Creation complete after 1s [id=subnet-02037c310fb3f0077][0m
[0m[1mmodule.networking.aws_subnet.private_subnet_1: Creation complete after 1s [id=subnet-0f6b2345cca438ebf][0m
[0m[1mmodule.networking.aws_subnet.public_subnet_2: Creation complete after 1s [id=subnet-08bfe1c241d4f91d3][0m
[0m[1mmodule.networking.aws_subnet.public_subnet_1: Creation complete after 1s [id=subnet-0088f999867fcd249][0m
[0m[1mmodule.networking.aws_nat_gateway.nat_gateway: Creating...[0m[0m
[0m[1mmodule.networking.aws_subnet.private_subnet_2: Creation complete after 1s [id=subnet-0a90712d0ee7d1c03][0m
[0m[1mmodule.instances.aws_db_subnet_group.db-subnet: Creating...[0m[0m
[0m[1mmodule.networking.aws_route_table.public_route: Creation complete after 1s [id=rtb-0bd197460ec59a8f5][0m
[0m[1mmodule.networking.aws_route_table_association.public_subnet_2_association: Creating...[0m[0m
[0m[1mmodule.networking.aws_route_table_association.public_subnet_1_association: Creating...[0m[0m
[0m[1mmodule.instances.aws_db_subnet_group.db-subnet: Creation complete after 1s [id=db subnet group - test1][0m
[0m[1mmodule.networking.aws_route_table_association.public_subnet_2_association: Creation complete after 0s [id=rtbassoc-0a39b28aa3cd0c1eb][0m
[0m[1mmodule.networking.aws_route_table_association.public_subnet_1_association: Creation complete after 0s [id=rtbassoc-061e9baee3c53d4db][0m
[0m[1mmodule.security.aws_security_group.bastion_sg: Creation complete after 2s [id=sg-09c88742c6e63748c][0m
[0m[1mmodule.security.aws_security_group.lb_sg: Creation complete after 2s [id=sg-0e5086f05c4b1aaa5][0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Creating...[0m[0m
[0m[1mmodule.security.aws_security_group.ec2_sg: Creating...[0m[0m
[0m[1mmodule.security.aws_security_group.ec2_sg: Creation complete after 3s [id=sg-025f8bc3997eeba15][0m
[0m[1mmodule.security.aws_security_group.efs_sg: Creating...[0m[0m
[0m[1mmodule.security.aws_security_group.rds_sg: Creating...[0m[0m
[0m[1mmodule.security.aws_security_group.rds_sg: Creation complete after 2s [id=sg-0a236efb54c39f512][0m
[0m[1mmodule.security.aws_security_group.efs_sg: Creation complete after 2s [id=sg-03a5f90828d3c2e81][0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[1]: Creating...[0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[0]: Creating...[0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Creating...[0m[0m
[0m[1mmodule.networking.aws_nat_gateway.nat_gateway: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[0]: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[1]: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.networking.aws_nat_gateway.nat_gateway: Still creating... [20s elapsed][0m[0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Still creating... [20s elapsed][0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[1]: Still creating... [20s elapsed][0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[0]: Still creating... [20s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [20s elapsed][0m[0m
[0m[1mmodule.networking.aws_nat_gateway.nat_gateway: Still creating... [30s elapsed][0m[0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Still creating... [30s elapsed][0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[0]: Still creating... [30s elapsed][0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[1]: Still creating... [30s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [30s elapsed][0m[0m
[0m[1mmodule.networking.aws_nat_gateway.nat_gateway: Still creating... [40s elapsed][0m[0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Still creating... [40s elapsed][0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[1]: Still creating... [40s elapsed][0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[0]: Still creating... [40s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [40s elapsed][0m[0m
[0m[1mmodule.networking.aws_nat_gateway.nat_gateway: Still creating... [50s elapsed][0m[0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Still creating... [50s elapsed][0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[1]: Still creating... [50s elapsed][0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[0]: Still creating... [50s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [50s elapsed][0m[0m
[0m[1mmodule.networking.aws_nat_gateway.nat_gateway: Still creating... [1m0s elapsed][0m[0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Still creating... [1m0s elapsed][0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[0]: Still creating... [1m0s elapsed][0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[1]: Still creating... [1m0s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [1m0s elapsed][0m[0m
[0m[1mmodule.networking.aws_nat_gateway.nat_gateway: Still creating... [1m10s elapsed][0m[0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Still creating... [1m10s elapsed][0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[0]: Still creating... [1m10s elapsed][0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[1]: Still creating... [1m10s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [1m10s elapsed][0m[0m
[0m[1mmodule.networking.aws_nat_gateway.nat_gateway: Still creating... [1m20s elapsed][0m[0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Still creating... [1m20s elapsed][0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[0]: Still creating... [1m20s elapsed][0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[1]: Still creating... [1m20s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [1m20s elapsed][0m[0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[1]: Creation complete after 1m23s [id=fsmt-065b02b59a2f625ee][0m
[0m[1mmodule.instances.aws_efs_mount_target.wordpress_mount_target[0]: Creation complete after 1m23s [id=fsmt-01cc31b48b6ee87ac][0m
[0m[1mmodule.networking.aws_nat_gateway.nat_gateway: Still creating... [1m30s elapsed][0m[0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Still creating... [1m30s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [1m30s elapsed][0m[0m
[0m[1mmodule.networking.aws_nat_gateway.nat_gateway: Still creating... [1m40s elapsed][0m[0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Still creating... [1m40s elapsed][0m[0m
[0m[1mmodule.networking.aws_nat_gateway.nat_gateway: Creation complete after 1m44s [id=nat-03b4634ee08b9f1b1][0m
[0m[1mmodule.networking.aws_route_table.private_route: Creating...[0m[0m
[0m[1mmodule.networking.aws_route_table.private_route: Creation complete after 1s [id=rtb-023b0737cf75b6ff4][0m
[0m[1mmodule.networking.aws_route_table_association.private_subnet_2_association: Creating...[0m[0m
[0m[1mmodule.networking.aws_route_table_association.private_subnet_3_association: Creating...[0m[0m
[0m[1mmodule.networking.aws_route_table_association.private_subnet_1_association: Creating...[0m[0m
[0m[1mmodule.networking.aws_route_table_association.private_subnet_2_association: Creation complete after 1s [id=rtbassoc-034cb3a3a0450063e][0m
[0m[1mmodule.networking.aws_route_table_association.private_subnet_1_association: Creation complete after 1s [id=rtbassoc-08f698072ec24ffbf][0m
[0m[1mmodule.networking.aws_route_table_association.private_subnet_3_association: Creation complete after 1s [id=rtbassoc-08e271f98812964b4][0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [1m40s elapsed][0m[0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Still creating... [1m50s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [1m50s elapsed][0m[0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Still creating... [2m0s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [2m0s elapsed][0m[0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Still creating... [2m10s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [2m10s elapsed][0m[0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Still creating... [2m21s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [2m20s elapsed][0m[0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Still creating... [2m31s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [2m30s elapsed][0m[0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Still creating... [2m41s elapsed][0m[0m
[0m[1mmodule.instances.aws_lb.wordpress_lb: Creation complete after 2m43s [id=arn:aws:elasticloadbalancing:ap-southeast-2:851725468631:loadbalancer/app/wordpress-lb-test1/1793732abc990a20][0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [2m40s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [2m50s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [3m0s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [3m10s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [3m20s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [3m30s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [3m40s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [3m50s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [4m0s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [4m10s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [4m20s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [4m30s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [4m40s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [4m50s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [5m0s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [5m10s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [5m20s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [5m30s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [5m40s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [5m50s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [6m0s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [6m10s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [6m20s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [6m30s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [6m40s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [6m50s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [7m0s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [7m10s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [7m20s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [7m30s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [7m40s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [7m50s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [8m0s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [8m10s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [8m20s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [8m30s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [8m40s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [8m50s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [9m0s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [9m10s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [9m20s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [9m30s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [9m40s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [9m50s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [10m0s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [10m10s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [10m20s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [10m30s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [10m40s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [10m50s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [11m0s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [11m10s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [11m20s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [11m30s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [11m40s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [11m50s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [12m0s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [12m10s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [12m20s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [12m30s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Still creating... [12m40s elapsed][0m[0m
[0m[1mmodule.instances.aws_db_instance.wordpress_db: Creation complete after 12m44s [id=db-UHWMFGMMRL6AIHG3344NJHHNTU][0m
[0m[1mmodule.instances.aws_instance.bastion: Creating...[0m[0m
[0m[1mmodule.instances.aws_launch_configuration.wordpress_lc: Creating...[0m[0m
[0m[1mmodule.instances.aws_launch_configuration.wordpress_lc: Creation complete after 1s [id=terraform-2024041602033511000000000a][0m
[0m[1mmodule.instances.aws_lb_target_group.wordpress_tg: Creating...[0m[0m
[0m[1mmodule.instances.aws_lb_target_group.wordpress_tg: Creation complete after 1s [id=arn:aws:elasticloadbalancing:ap-southeast-2:851725468631:targetgroup/wordpress-tg-test1/6b82c89a3aa156fd][0m
[0m[1mmodule.instances.aws_lb_listener.wordpress_listener: Creating...[0m[0m
[0m[1mmodule.instances.aws_autoscaling_group.wordpress_asg: Creating...[0m[0m
[0m[1mmodule.instances.aws_lb_listener.wordpress_listener: Creation complete after 1s [id=arn:aws:elasticloadbalancing:ap-southeast-2:851725468631:listener/app/wordpress-lb-test1/1793732abc990a20/68419de02375a22a][0m
[0m[1mmodule.instances.aws_instance.bastion: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.instances.aws_autoscaling_group.wordpress_asg: Still creating... [11s elapsed][0m[0m
[0m[1mmodule.instances.aws_instance.bastion: Still creating... [20s elapsed][0m[0m
[0m[1mmodule.instances.aws_autoscaling_group.wordpress_asg: Still creating... [21s elapsed][0m[0m
[0m[1mmodule.instances.aws_instance.bastion: Still creating... [30s elapsed][0m[0m
[0m[1mmodule.instances.aws_autoscaling_group.wordpress_asg: Still creating... [31s elapsed][0m[0m
[0m[1mmodule.instances.aws_instance.bastion: Creation complete after 33s [id=i-0ea796f14ce30cdb5][0m
[0m[1mmodule.instances.aws_autoscaling_group.wordpress_asg: Still creating... [41s elapsed][0m[0m
[0m[1mmodule.instances.aws_autoscaling_group.wordpress_asg: Creation complete after 47s [id=terraform-2024041602033750440000000b][0m
[0m[1mmodule.instances.aws_autoscaling_policy.scale_in_policy: Creating...[0m[0m
[0m[1mmodule.instances.aws_autoscaling_policy.scale_out_policy: Creating...[0m[0m
[0m[1mmodule.instances.aws_autoscaling_policy.scale_out_policy: Creation complete after 1s [id=scale-out-policy][0m
[0m[1mmodule.instances.aws_cloudwatch_metric_alarm.scale_out: Creating...[0m[0m
[0m[1mmodule.instances.aws_autoscaling_policy.scale_in_policy: Creation complete after 1s [id=scale-in-policy][0m
[0m[1mmodule.instances.aws_cloudwatch_metric_alarm.scale_in: Creating...[0m[0m
[0m[1mmodule.instances.aws_cloudwatch_metric_alarm.scale_in: Creation complete after 0s [id=wordpress_scale_down][0m
[0m[1mmodule.instances.aws_cloudwatch_metric_alarm.scale_out: Creation complete after 0s [id=wordpress_scale_up][0m
[0m[1m[32m
Apply complete! Resources: 37 added, 0 changed, 0 destroyed.
[0m